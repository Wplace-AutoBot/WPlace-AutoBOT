name: Pages – aggregate all branches

on:
    push:
        branches: ['main', 'dev']
    workflow_dispatch:

permissions:
    contents: read
    pages: write
    id-token: write

concurrency:
    group: pages
    cancel-in-progress: true

jobs:
    aggregate_deploy:
        runs-on: ubuntu-latest
        environment:
            name: github-pages
            url: ${{ steps.deploy.outputs.page_url }}

        steps:
            - name: Checkout (shallow)
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'
                  cache: 'npm'

            - uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      public/production
                  key: ${{ runner.os }}-cd-${{ hashFiles('**/package-lock.json') }}-${{ github.ref_name }}-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-cd-${{ hashFiles('**/package-lock.json') }}-${{ github.ref_name }}-
                      ${{ runner.os }}-cd-${{ hashFiles('**/package-lock.json') }}-
                      ${{ runner.os }}-cd-

            - name: Install dependencies
              run: npm ci

            - name: Build production files (main branch only)
              if: github.ref == 'refs/heads/main'
              run: |
                  echo "🔨 Building production files..."
                  if ! npm run build:all; then
                      echo "❌ Production build failed" >&2
                      exit 1
                  fi
                  mkdir -p public/production
                  if ! cp -r dist/* public/production/; then
                      echo "❌ Failed to copy production files" >&2
                      exit 1
                  fi
                  echo "✅ Production build completed successfully"

            - name: Configure Pages
              uses: actions/configure-pages@v5

            - name: Aggregate and build recursive directory pages
              shell: bash
              run: |
                  set -euo pipefail

                  # jq for JSON escaping (present on runners, but ensure)
                  if ! command -v jq >/dev/null 2>&1; then
                    sudo apt-get update -y
                    sudo apt-get install -y jq
                  fi

                  REPO="${GITHUB_REPOSITORY#*/}"
                  SITE_ROOT="/${REPO}/"

                  mkdir -p public
                  : > public/.nojekyll

                  # Tiny favicon assets to avoid 404s
                  printf "%s" \
                    "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><text y='14' font-size='14'>🚀</text></svg>" \
                    > public/favicon.svg

                  # List remote branches
                  mapfile -t BRANCHES < <(
                    git ls-remote --heads origin | awk '{print $2}' \
                    | sed 's@refs/heads/@@'
                  )

                  # Landing page (no globals except window.__branches)
                  cat > public/index.html <<'HTML'
                  <!doctype html>
                  <meta charset="utf-8" />
                  <meta name="viewport" content="width=device-width,initial-scale=1" />
                  <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Ctext y='14' font-size='14'%3E🚀%3C/text%3E%3C/svg%3E" />
                  <title>WPlace AutoBOT - Branches</title>
                  <style>
                    :root {
                      --wplace-primary: linear-gradient(135deg, #000 0%, #1a1a1a 100%);
                      --wplace-secondary: linear-gradient(135deg, #111 0%, #2a2a2a 100%);
                      --wplace-accent: #222;
                      --wplace-text: #fff;
                      --wplace-highlight: #775ce3;
                      --wplace-highlight-secondary: #d3a4ff;
                      --wplace-icon-primary: #4facfe;
                      --wplace-icon-secondary: #00f2fe;
                      --wplace-radius: 12px;
                      --wplace-shadow: 0 8px 32px rgb(0 0 0 / 60%), 0 0 0 1px rgb(255 255 255 / 10%);
                      --wplace-backdrop: blur(10px);
                      --wplace-font: 'Segoe UI', roboto, sans-serif;
                    }
                    
                    body {
                      font-family: var(--wplace-font);
                      margin: 24px;
                      background: #0d1117;
                      color: var(--wplace-text);
                      line-height: 1.6;
                    }
                    
                    h1 {
                      background: linear-gradient(135deg, var(--wplace-icon-primary) 0%, var(--wplace-icon-secondary) 100%);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                      font-weight: 700;
                      font-size: 2.5rem;
                      margin-bottom: 8px;
                      text-align: center;
                    }
                    
                    .subtitle {
                      text-align: center;
                      color: var(--wplace-highlight-secondary);
                      margin-bottom: 32px;
                      font-size: 1.1rem;
                      opacity: 0.9;
                    }
                    
                    a {
                      color: var(--wplace-icon-primary);
                      text-decoration: none;
                      transition: color 0.2s ease;
                    }
                    
                    a:hover {
                      color: var(--wplace-icon-secondary);
                    }
                    
                    .card {
                      background: var(--wplace-secondary);
                      padding: 20px;
                      border-radius: var(--wplace-radius);
                      margin: 16px 0;
                      border: 1px solid rgb(255 255 255 / 10%);
                      box-shadow: var(--wplace-shadow);
                      backdrop-filter: var(--wplace-backdrop);
                      transition: all 0.3s ease;
                    }
                    
                    .card:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 12px 40px rgb(0 0 0 / 70%), 0 0 0 1px rgb(255 255 255 / 15%);
                      border-color: var(--wplace-highlight);
                    }
                    
                    .card strong {
                      color: var(--wplace-highlight);
                      font-size: 1.2rem;
                      display: block;
                      margin-bottom: 8px;
                    }
                    
                    .card a {
                      background: linear-gradient(135deg, var(--wplace-highlight) 0%, var(--wplace-highlight-secondary) 100%);
                      color: white;
                      padding: 8px 16px;
                      border-radius: 8px;
                      display: inline-block;
                      font-weight: 500;
                      transition: all 0.2s ease;
                    }
                    
                    .card a:hover {
                      transform: translateY(-1px);
                      box-shadow: 0 4px 12px rgb(0 0 0 / 30%);
                      color: white;
                    }
                    
                    input {
                      background: rgb(255 255 255 / 8%);
                      border: 1px solid rgb(255 255 255 / 20%);
                      color: var(--wplace-text);
                      padding: 12px 16px;
                      border-radius: var(--wplace-radius);
                      width: 100%;
                      max-width: 420px;
                      font-size: 16px;
                      margin: 0 auto 32px;
                      display: block;
                      transition: all 0.2s ease;
                    }
                    
                    input:focus {
                      outline: none;
                      border-color: var(--wplace-highlight);
                      box-shadow: 0 0 0 3px rgb(119 92 227 / 20%);
                      background: rgb(255 255 255 / 12%);
                    }
                    
                    input::placeholder {
                      color: rgb(255 255 255 / 50%);
                    }
                    
                    .header-info {
                      text-align: center;
                      margin-bottom: 24px;
                      padding: 16px;
                      background: rgb(255 255 255 / 5%);
                      border-radius: var(--wplace-radius);
                      border: 1px solid rgb(255 255 255 / 10%);
                    }
                    
                    .emoji {
                      font-size: 1.5rem;
                      margin-right: 8px;
                    }
                  </style>
                  <h1><span class="emoji">🚀</span>WPlace AutoBOT</h1>
                  <div class="subtitle">Branch File Browser</div>
                  <input id="q" placeholder="🔍 Filter branches..." />
                  <div id="list"></div>
                  <script>window.__branches=window.__branches||[];</script>
                  HTML

                  # Emit index.html for a directory
                  gen_index_dir() {
                    local DIR="$1" ROOT="$2" BR="$3"
                    local rel="${DIR#$ROOT}"
                    local title="Branch: ${BR}${rel:-/}"

                    {
                      echo "<!doctype html><meta charset='utf-8'/>"
                      echo "<meta name='viewport' content='width=device-width,initial-scale=1'/>"
                      echo "<link rel='icon' href=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Ctext y='14' font-size='14'%3E🚀%3C/text%3E%3C/svg%3E\" />"
                      echo "<title>WPlace AutoBOT - ${title}</title>"
                      echo "<style>:root{--wplace-primary:linear-gradient(135deg,#000 0%,#1a1a1a 100%);--wplace-secondary:linear-gradient(135deg,#111 0%,#2a2a2a 100%);--wplace-text:#fff;--wplace-highlight:#775ce3;--wplace-icon-primary:#4facfe;--wplace-icon-secondary:#00f2fe;--wplace-radius:12px;--wplace-shadow:0 8px 32px rgb(0 0 0 / 60%), 0 0 0 1px rgb(255 255 255 / 10%);--wplace-font:'Segoe UI',roboto,sans-serif}body{font-family:var(--wplace-font);margin:24px;background:#0d1117;color:var(--wplace-text);line-height:1.6}h1{background:linear-gradient(135deg,var(--wplace-icon-primary) 0%,var(--wplace-icon-secondary) 100%);-webkit-background-clip:text;-webkit-text-fill-color:transparent;background-clip:text;font-weight:600;margin-bottom:16px}a{color:var(--wplace-icon-primary);text-decoration:none;transition:color 0.2s ease}a:hover{color:var(--wplace-icon-secondary)}table{width:100%;border-collapse:collapse;background:rgb(255 255 255 / 3%);border-radius:var(--wplace-radius);overflow:hidden;border:1px solid rgb(255 255 255 / 10%)}th{background:var(--wplace-secondary);color:var(--wplace-highlight);padding:12px;border-bottom:1px solid rgb(255 255 255 / 20%);font-weight:500}td{padding:10px 12px;border-bottom:1px solid rgb(255 255 255 / 8%)}tr:hover{background:rgb(255 255 255 / 5%)}tr:last-child td{border-bottom:none}.nav{margin-bottom:20px;padding:12px;background:rgb(255 255 255 / 5%);border-radius:var(--wplace-radius);border:1px solid rgb(255 255 255 / 10%)}.nav a{margin-right:16px;padding:6px 12px;background:rgb(255 255 255 / 8%);border-radius:6px;transition:all 0.2s ease}.nav a:hover{background:rgb(255 255 255 / 15%);transform:translateY(-1px)}</style>"
                      echo "<h1>🚀 ${title}</h1>"
                      if [[ "$DIR" != "$ROOT" ]]; then
                        echo "<div class='nav'><a href='../'>⬆ Up</a><a href='${SITE_ROOT}'>🏠 All branches</a></div>"
                      else
                        echo "<div class='nav'><a href='${SITE_ROOT}'>🏠 All branches</a></div>"
                      fi
                      echo "<table><thead><tr><th>Name</th><th style='width:120px'>Size</th><th style='width:180px'>Modified</th></tr></thead><tbody>"

                      # Subdirectories
                      while IFS= read -r d; do
                        [[ -n "$d" ]] || continue
                        printf "<tr><td>📁 <a href='./%s/'>%s/</a></td><td>—</td><td>—</td></tr>\n" "$d" "$d"
                      done < <(find "$DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort)

                      # Files
                      while IFS= read -r f; do
                        [[ -n "$f" ]] || continue
                        size=$(stat -c %s "$DIR/$f" 2>/dev/null || echo 0)
                        size_h=$(numfmt --to=iec --suffix=B "$size" 2>/dev/null || echo "$size")
                        mod=$(date -r "$DIR/$f" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "")
                        printf "<tr><td>📄 <a href='./%s'>%s</a></td><td>%s</td><td>%s</td></tr>\n" "$f" "$f" "$size_h" "$mod"
                      done < <(find "$DIR" -mindepth 1 -maxdepth 1 -type f ! -name 'index.html' -printf '%f\n' | sort)

                      echo "</tbody></table>"
                      echo "<p style='opacity:.7'>Generated $(date -u '+%Y-%m-%d %H:%M UTC')</p>"
                    } > "$DIR/index.html"
                  }

                  # Build per-branch trees and indexes
                  for BR in "${BRANCHES[@]}"; do
                    SAFE="$(echo "$BR" | tr '/:@ ' '----' | sed 's/[^A-Za-z0-9._-]/-/g')"
                    mkdir -p "public/$SAFE"

                    git fetch --depth=1 origin "$BR"
                    git archive --format=tar FETCH_HEAD | tar -x -C "public/$SAFE"

                    # Build files for this branch with proper error handling
                    if [[ -f "public/$SAFE/package.json" ]]; then
                      cd "public/$SAFE"
                      echo "🔨 Building files for branch $BR..."
                      
                      # Install dependencies with error handling
                      if ! npm ci; then
                        echo "❌ Failed to install dependencies for branch $BR" >&2
                        cd ../..
                        continue
                      fi
                      
                      # Build with error handling
                      if npm run build:all; then
                        echo "✅ Successfully built files for branch $BR"
                        
                        # Validate build outputs exist and have reasonable size
                        build_success=true
                        if [[ -d "dist" ]]; then
                          for file in dist/auto-image.*.js dist/auto-image.*.txt; do
                            if [[ -f "$file" ]]; then
                              size=$(stat -c%s "$file" 2>/dev/null || echo 0)
                              if [[ $size -lt 100 ]]; then
                                echo "⚠️ Build output $file is suspiciously small ($size bytes)" >&2
                                build_success=false
                              fi
                            fi
                          done
                          
                          if [[ "$build_success" == "true" ]]; then
                            # Copy built files to root of branch directory for direct access
                            if cp dist/auto-image.*.js . && cp dist/auto-image.*.txt .; then
                              echo "✅ Build artifacts copied successfully for branch $BR"
                            else
                              echo "⚠️ Failed to copy some build artifacts for branch $BR" >&2
                            fi
                          else
                            echo "⚠️ Build validation failed for branch $BR, serving source files only" >&2
                          fi
                        else
                          echo "⚠️ No dist directory found for branch $BR, serving source files only" >&2
                        fi
                      else
                        echo "❌ Build failed for branch $BR, serving source files only" >&2
                      fi
                      cd ../..
                    else
                      echo "ℹ️ No package.json found for branch $BR, serving source files only"
                    fi

                    # Keep only static assets; prune empty dirs
                    rm -rf "public/$SAFE/.git" "public/$SAFE/.github" \
                           "public/$SAFE/node_modules"
                    find "public/$SAFE" -type f ! \
                      \( -name '*.html' -o -name '*.js' -o -name '*.css' -o \
                         -name '*.json' -o -name '*.png' -o -name '*.jpg' -o \
                         -name '*.jpeg' -o -name '*.gif' -o -name '*.svg' -o \
                         -name '*.txt' \) \
                      -delete
                    find "public/$SAFE" -type d -empty -delete

                    ROOT_DIR="public/$SAFE"
                    while IFS= read -r -d '' d; do
                      gen_index_dir "$d" "$ROOT_DIR" "$BR"
                    done < <(find "$ROOT_DIR" -type d -print0)

                    # Append to landing page (JSON-escaped)
                    SAFE_JSON=$(printf '%s' "$SAFE" | jq -Rr @json)
                    BR_JSON=$(printf '%s' "$BR" | jq -Rr @json)
                    echo "<script>window.__branches.push({safe:$SAFE_JSON,name:$BR_JSON});</script>" \
                      >> public/index.html
                  done

                  # Finish landing page
                  cat >> public/index.html <<'HTML'
                  <script>
                    (() => {
                      const q = document.getElementById('q');
                      const listEl = document.getElementById('list');

                      function render(filter = '') {
                        listEl.innerHTML = '';
                        const qv = filter.toLowerCase();
                        for (const b of (window.__branches || []).filter(x =>
                          x.name.toLowerCase().includes(qv)
                        )) {
                          const div = document.createElement('div');
                          div.className = 'card';
                          div.innerHTML = `<strong>${b.name}</strong><div>
                            <a href="./${b.safe}/">Open</a>
                          </div>`;
                          listEl.appendChild(div);
                        }
                      }

                      q.addEventListener('input', (e) => render(e.target.value));
                      render();
                    })();
                  </script>
                  HTML

            - name: Upload Pages artifact
              uses: actions/upload-pages-artifact@v4
              with:
                  path: public

            - name: Deploy to GitHub Pages
              id: deploy
              uses: actions/deploy-pages@v4
